import os
import logging
from dataclasses import dataclass, field
from enum import Enum
from typing import Dict, List, Optional

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
ADMINS_ENV = os.getenv("ADMINS", "").strip()
DOWNLOADS_DIR = os.getenv("DOWNLOADS_DIR", "downloads")
YOUTUBE_COOKIES_PATH = os.getenv("YOUTUBE_COOKIES", "").strip()

PROXY_ENABLED = os.getenv("PROXY_ENABLED", "0").lower() in ("1","true","yes")
PROXY_URL = os.getenv("PROXY_URL", "").strip()
FFMPEG_LOCATION = os.getenv("FFMPEG_LOCATION", "").strip()

VOTE_WINDOW_SEC = int(os.getenv("VOTE_WINDOW_SEC", "180"))
SONG_COOLDOWN_SEC = int(os.getenv("SONG_COOLDOWN_SEC", "240"))
RADIO_SEARCH_QUERY_SUFFIX = os.getenv("RADIO_SEARCH_QUERY_SUFFIX", "music")

LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.getLogger().setLevel(getattr(logging, LOG_LEVEL, logging.INFO))

GENRES: List[str] = [
    "Electronic", "Pop", "Rock", "Hip-Hop", "House", "Techno", "Trance", "Ambient",
    "Drum & Bass", "Dubstep", "Jazz", "Blues", "Reggae", "Disco", "Funk", "Soul",
    "Classical", "Indie", "Synthwave", "Lo-fi"
]

class Source(str, Enum):
    YOUTUBE = "youtube"
    YOUTUBE_MUSIC = "ytmusic"
    SOUNDCLOUD = "soundcloud"
    JAMENDO = "jamendo"
    ARCHIVE = "archive"

@dataclass
class TrackInfo:
    id: str
    title: str
    artist: str
    duration: int
    source: str
    url: str

@dataclass
class RadioStatus:
    is_on: bool = True
    current_genre: Optional[str] = None
    current_track: Optional[TrackInfo] = None
    last_played_time: float = 0.0
    cooldown: int = SONG_COOLDOWN_SEC

@dataclass
class ChatData:
    status_message_id: Optional[int] = None

@dataclass
class BotState:
    active_chats: Dict[int, ChatData] = field(default_factory=dict)
    source: Source = Source.YOUTUBE
    radio_status: RadioStatus = field(default_factory=RadioStatus)
    search_results: Dict[int, List[TrackInfo]] = field(default_factory=dict)
    voting_active: bool = False
    vote_end_ts: float = 0.0
    vote_counts: Dict[str, int] = field(default_factory=dict)
    playlist: List[TrackInfo] = field(default_factory=list)

MESSAGES = {
    "welcome": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Groove AI Bot. –í–∫–ª—é—á–∞–π —Ä–∞–¥–∏–æ, –∏—â–∏ —Ç—Ä–µ–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –≥–æ–ª–æ—Å—É–π –∑–∞ –∂–∞–Ω—Ä –∫–∞–∂–¥—ã–π —á–∞—Å.",
    "play_usage": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>/play &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt;</b> ‚Äî –ø–æ–∫–∞–∂—É –¥–æ 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
    "searching": "üîé –ò—â—É —Ç—Ä–µ–∫–∏...",
    "not_found": "üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫.",
    "radio_on": "üìª –†–∞–¥–∏–æ –≤–∫–ª—é—á–µ–Ω–æ! –ú—É–∑—ã–∫–∞ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç –∏–≥—Ä–∞—Ç—å.",
    "radio_off": "‚è∏ –†–∞–¥–∏–æ –≤—ã–∫–ª—é—á–µ–Ω–æ.",
    "admin_only": "‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
    "next_track": "‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫...",
    "source_switched": "üîÅ –ò—Å—Ç–æ—á–Ω–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω: <b>{source}</b>",
    "vote_started": "üó≥ –°—Ç–∞—Ä—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –∂–∞–Ω—Ä! –í—ã–±–∏—Ä–∞–π—Ç–µ –Ω–∏–∂–µ. –û–∫–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {mins} –º–∏–Ω.",
    "vote_accepted": "‚úÖ –ì–æ–ª–æ—Å –∑–∞ –∂–∞–Ω—Ä <b>{genre}</b> –∑–∞—Å—á–∏—Ç–∞–Ω!",
    "vote_ended": "üèÅ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ. –ü–æ–±–µ–¥–∏–ª –∂–∞–Ω—Ä: <b>{genre}</b>.",
}
def check_environment() -> bool:
    ok = True
    if not BOT_TOKEN:
        logging.getLogger(__name__).error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")
        ok = False
    os.makedirs(DOWNLOADS_DIR, exist_ok=True)
    return ok

def parse_admins() -> List[int]:
    out = []
    if ADMINS_ENV:
        for p in ADMINS_ENV.split(","):
            p = p.strip()
            if p.isdigit():
                out.append(int(p))
    return out

ADMINS: List[int] = parse_admins()
