import os
import logging
from dotenv import load_dotenv
from pydantic import BaseModel, Field
from enum import Enum
from typing import List, Dict, Optional
import subprocess

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ ID –∏ —Ç–æ–∫–µ–Ω—ã ---
BOT_TOKEN = os.getenv("BOT_TOKEN", "")

# –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ADMIN_IDS, –æ–∂–∏–¥–∞—è —Å—Ç—Ä–æ–∫—É —Å ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
ADMIN_IDS_STR = os.getenv("ADMIN_IDS", "0")
# –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
ADMIN_IDS = [int(admin_id.strip()) for admin_id in ADMIN_IDS_STR.split(',') if admin_id.strip()]

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è yt-dlp
DOWNLOADS_DIR = "downloads"
if not os.path.exists(DOWNLOADS_DIR):
    os.makedirs(DOWNLOADS_DIR)

# --- –ò—Å—Ç–æ—á–Ω–∏–∫–∏ --- #
class Source(Enum):
    YOUTUBE = "YouTube"
    VK = "VK"
    SOUNDCLOUD = "SoundCloud"
    ARCHIVE = "Internet Archive"

# --- –ú–æ–¥–µ–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (Pydantic) --- #
class TrackInfo(BaseModel):
    title: str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    artist: str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    duration: int = 0

class RadioStatus(BaseModel):
    is_on: bool = False
    current_genre: str = "lofi hip hop"
    current_track: Optional[TrackInfo] = None
    last_played_time: float = 0.0
    cooldown: int = 180  # 3 –º–∏–Ω—É—Ç—ã

class BotState(BaseModel):
    class ChatData(BaseModel):
        status_message_id: Optional[int] = None

    source: Source = Source.YOUTUBE
    radio_status: RadioStatus = Field(default_factory=RadioStatus)
    active_chats: Dict[int, ChatData] = Field(default_factory=dict)

# --- –¢–µ–∫—Å—Ç—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã --- #
MESSAGES = {
    "welcome": "üé∂ –ü—Ä–∏–≤–µ—Ç! –Ø –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /menu, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
    "admin_only": "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
    "radio_on": "üìª –†–∞–¥–∏–æ –≤–∫–ª—é—á–µ–Ω–æ! –ú—É–∑—ã–∫–∞ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç –∏–≥—Ä–∞—Ç—å.",
    "radio_off": "üîá –†–∞–¥–∏–æ –≤—ã–∫–ª—é—á–µ–Ω–æ.",
    "play_usage": "üéµ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –ø–æ—Å–ª–µ /play, –Ω–∞–ø—Ä–∏–º–µ—Ä: /play Queen - Bohemian Rhapsody",
    "searching": "üîç –ò—â—É —Ç—Ä–µ–∫...",
    "not_found": "üòï –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
    "next_track": "‚è≠Ô∏è –í–∫–ª—é—á–∞—é —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –Ω–∞ —Ä–∞–¥–∏–æ...",
    "source_switched": "üíø –ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {source}"
}

GENRES = [
    "lofi hip hop", "chillstep", "ambient", "downtempo", "jazz hop",
    "synthwave", "deep house", "liquid drum and bass", "psybient", "lounge"
]

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    logger.info("Checking environment...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['BOT_TOKEN']
    for var in required_vars:
        if not os.getenv(var):
            logger.error(f"Missing environment variable: {var}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    required_dirs = ['downloads']
    for dir_name in required_dirs:
        if not os.path.exists(dir_name):
            os.makedirs(dir_name)
            logger.info(f"Created directory: {dir_name}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ FFmpeg (–¥–ª—è yt-dlp)
    try:
        subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True, timeout=5)
        logger.info("FFmpeg is available")
    except (subprocess.CalledProcessError, FileNotFoundError, subprocess.TimeoutExpired):
        logger.warning("FFmpeg is not available - audio conversion may fail")
    
    logger.info("Environment check completed")
    return True