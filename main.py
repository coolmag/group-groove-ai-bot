import asyncio
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

from config import BOT_TOKEN
from models import BotState, Source, TrackInfo
from utils import get_menu_text, get_menu_keyboard
from locks import state_lock
from downloader import TrackInfoExtractor
from voice_engine import VoiceEngine

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ ---
class MusicBot:
    def __init__(self, app: Application, voice_engine: VoiceEngine):
        self.app = app
        self.voice_engine = voice_engine
        self.track_extractor = TrackInfoExtractor()

    def get_chat_state(self, context: ContextTypes.DEFAULT_TYPE) -> BotState:
        if "bot_state" not in context.chat_data:
            context.chat_data["bot_state"] = BotState()
        return context.chat_data["bot_state"]

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

    async def menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        state = self.get_chat_state(context)
        await update.message.reply_text(
            text=get_menu_text(state),
            reply_markup=get_menu_keyboard(state)
        )

    async def play(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = " ".join(context.args)
        if not query:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –ø–æ—Å–ª–µ /play.")
            return

        await update.message.reply_text(f"üîé –ò—â—É: '{query}'...")
        track_info = await self.track_extractor.extract_track_info(query, source=Source.YOUTUBE)

        if track_info:
            state = self.get_chat_state(context)
            async with state_lock:
                state.playlist.append(track_info)
                logger.info(f"Track '{track_info.title}' added to playlist for chat {update.message.chat_id}")
            await update.message.reply_text(f"‚úÖ –í –æ—á–µ—Ä–µ–¥—å: <b>{track_info.title}</b>", parse_mode='HTML')
        else:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏: '{query}'.")

    async def playlist(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        state = self.get_chat_state(context)
        if not state.playlist:
            await update.message.reply_text("–ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç.")
            return

        message = "üéµ **–ü–ª–µ–π–ª–∏—Å—Ç:**\n\n"
        for i, track in enumerate(state.playlist[:10], 1):
            message += f"{i}. {track.title}\n"
        if len(state.playlist) > 10:
            message += f"\n...–∏ –µ—â–µ {len(state.playlist) - 10} —Ç—Ä–µ–∫–æ–≤."
        await update.message.reply_text(message, parse_mode='Markdown')

    async def join(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        await self.voice_engine.join_chat(chat_id)
        await update.message.reply_text("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É.")

    async def leave(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        await self.voice_engine.leave_chat(chat_id)
        await update.message.reply_text("üëã –û—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞.")

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        state = self.get_chat_state(context)
        # ... (–ª–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ—Å—Ç–∞–ª–∞—Å—å –ø—Ä–µ–∂–Ω–µ–π, –Ω–æ —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å voice_engine)
        await query.edit_message_text(text=get_menu_text(state), reply_markup=get_menu_keyboard(state))

# --- –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
    voice_engine = VoiceEngine()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Application.builder().token(BOT_TOKEN).build()
    bot = MusicBot(app, voice_engine)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("menu", bot.menu))
    app.add_handler(CommandHandler("play", bot.play))
    app.add_handler(CommandHandler("playlist", bot.playlist))
    app.add_handler(CommandHandler("join", bot.join))
    app.add_handler(CommandHandler("leave", bot.leave))
    app.add_handler(CallbackQueryHandler(bot.button_handler))

    # –ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ –≤–º–µ—Å—Ç–µ
    logger.info("Starting all services...")
    try:
        await voice_engine.start()
        await app.initialize()
        await app.start()
        await app.updater.start_polling()
        logger.info("All services started successfully.")
        await asyncio.Event().wait() # –†–∞–±–æ—Ç–∞—Ç—å –≤–µ—á–Ω–æ
    finally:
        logger.info("Stopping all services...")
        await voice_engine.stop()
        await app.updater.stop()
        await app.stop()
        logger.info("All services stopped.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user.")
