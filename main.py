import logging
import os
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

from config import BOT_TOKEN
from downloader import AudioDownloader

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ ---
class MusicBot:
    def __init__(self, app: Application):
        self.app = app
        self.downloader = AudioDownloader()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É /play <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏>, "
            "–∏ —è –Ω–∞–π–¥—É, —Å–∫–∞—á–∞—é –∏ –ø—Ä–∏—à–ª—é –µ–µ —Ç–µ–±–µ."
        )

    async def play(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = " ".join(context.args)
        if not query:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –ø–æ—Å–ª–µ /play.")
            return

        msg = await update.message.reply_text(f"üîé –ò—â—É –∏ —Å–∫–∞—á–∏–≤–∞—é: '{query}'...")

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
            loop = asyncio.get_running_loop()
            filepath = await loop.run_in_executor(
                None, self.downloader.download_audio, query
            )

            if filepath and os.path.exists(filepath):
                await msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ...")
                await context.bot.send_audio(
                    chat_id=update.effective_chat.id,
                    audio=open(filepath, 'rb'),
                    title=query,
                    write_timeout=60 # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                )
                await msg.delete()
            else:
                await msg.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫: '{query}'.")

        except Exception as e:
            logger.error(f"Error in /play command: {e}")
            await msg.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            if 'filepath' in locals() and filepath and os.path.exists(filepath):
                os.remove(filepath)

# --- –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
async def main():
    app = Application.builder().token(BOT_TOKEN).build()
    bot = MusicBot(app)

    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(CommandHandler("play", bot.play))

    logger.info("Bot starting in simple mode...")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    logger.info("Bot started successfully.")
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user.")