import logging
import os
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

from config import BOT_TOKEN
from downloader import SmartDownloader

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ ---
class MusicBot:
    def __init__(self, app: Application):
        self.app = app
        self.downloader = SmartDownloader()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–µ—é –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º—É–∑—ã–∫—É –∏ –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /play <–ø–µ—Å–Ω—è> –∏–ª–∏ /audiobook <–∫–Ω–∏–≥–∞>."
        )

    async def _process_media_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE, search_type: str):
        query = " ".join(context.args)
        if not query:
            await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /{search_type}.")
            return

        msg = await update.message.reply_text(f"üîé –ò—â—É: '{query}'...")

        try:
            loop = asyncio.get_running_loop()
            media_data = await loop.run_in_executor(
                None, self.downloader.download_media, query, search_type
            )

            if media_data and os.path.exists(media_data['filepath']):
                await msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
                filepath = media_data['filepath']
                await context.bot.send_audio(
                    chat_id=update.effective_chat.id,
                    audio=open(filepath, 'rb'),
                    title=media_data['title'],
                    performer=media_data['artist'],
                    filename=media_data['filename'],
                    duration=media_data['duration'],
                    write_timeout=120 # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –µ—â–µ –±–æ–ª—å—à–µ –¥–ª—è –∞—É–¥–∏–æ–∫–Ω–∏–≥
                )
                await msg.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø–æ–∏—Å–∫–∞
            else:
                await msg.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –¥–ª—è: '{query}'.")

        except Exception as e:
            logger.error(f"Error in /{search_type} command: {e}")
            await msg.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")
        finally:
            if 'media_data' in locals() and media_data and os.path.exists(media_data['filepath']):
                os.remove(media_data['filepath'])

    async def play(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self._process_media_request(update, context, search_type='music')

    async def audiobook(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self._process_media_request(update, context, search_type='audiobook')

# --- –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
async def main():
    app = Application.builder().token(BOT_TOKEN).build()
    bot = MusicBot(app)

    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(CommandHandler("play", bot.play))
    app.add_handler(CommandHandler("audiobook", bot.audiobook))

    logger.info("Bot starting...")
    try:
        await app.initialize()
        await app.start()
        await app.updater.start_polling()
        logger.info("Bot started successfully.")
        await asyncio.Event().wait() # –†–∞–±–æ—Ç–∞—Ç—å –≤–µ—á–Ω–æ
    finally:
        logger.info("Shutting down bot...")
        await app.updater.stop()
        await app.stop()
        logger.info("Bot has been shut down.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user.")
